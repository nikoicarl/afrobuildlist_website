<div class="cart-container">
    <div class="row">
        <!-- Cart Items -->
        <div class="col-lg-8">
            <div class="cart-main">
                <table class="table cart-table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>Subtotal</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="cartItems">
                        <!-- Cart items will be inserted dynamically here -->
                    </tbody>
                </table>

                <div class="cart-actions">
                    <input type="text" class="coupon-input" placeholder="Apply Coupon Code">
                    <button class="apply-coupon-btn">Apply Coupon Code</button>
                    <button id="updateCartBtn" class="update-cart-btn">Update Cart</button>
                </div>
            </div>
        </div>

        <!-- Cart Summary -->
        <div class="col-lg-4">
            <div class="cart-summary">
                <div class="summary-row">
                    <span class="summary-label">Subtotal</span>
                    <span class="summary-value" id="subtotalPrice">GH₵0.00</span>
                </div>
                <div class="summary-row">
                    <span class="summary-label">Discount</span>
                    <span class="summary-value discount-value">GH₵0.00</span>
                </div>
                <div class="summary-row">
                    <span class="summary-label">Shipping</span>
                    <span class="summary-value discount-value">Free</span>
                </div>
                <div class="summary-row total-row">
                    <span class="total-label">Total:</span>
                    <span class="total-value" id="totalPrice">GH₵0.00</span>
                </div>
                <button class="checkout-btn">Proceed To Checkout</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const userID = localStorage.getItem('userID');

        // Ensure that a user is logged in
        if (userID) {
            displayCart(userID);
        } else {
            document.getElementById('cartItems').innerHTML = "<tr><td colspan='5'>Please log in to view your cart.</td></tr>";
        }

        // Attach event listener for "Update Cart" button
        const updateCartBtn = document.getElementById('updateCartBtn');
        if (updateCartBtn) {
            updateCartBtn.addEventListener('click', () => {
                alert("Cart updated");
                // Implement update cart functionality here
            });
        }
    });

    // Function to display the cart items
    function displayCart(userID) {
        const cartItemsContainer = document.getElementById('cartItems');
        const cart = JSON.parse(localStorage.getItem(`cart_${userID}`)) || {};

        // Clear any previous content
        cartItemsContainer.innerHTML = '';

        // If the cart is empty, show a message
        if (Object.keys(cart).length === 0) {
            cartItemsContainer.innerHTML = "<tr><td colspan='5'>Your cart is empty.</td></tr>";
            document.getElementById('totalPrice').textContent = 'GH₵0.00';
            document.getElementById('subtotalPrice').textContent = 'GH₵0.00';
            return;
        }

        // Render each cart item
        let subtotalPrice = 0;
        Object.values(cart).forEach(item => {
            subtotalPrice += item.totalPrice;

            // Create a row for each cart item
            const itemRow = document.createElement('tr');
            itemRow.innerHTML = `
                <td>${item.name}</td>
                <td>GH₵${item.price.toFixed(2)}</td>
                <td>
                    <input type="number" class="quantity-input" data-id="${item.id}" value="${item.quantity}" min="1">
                </td>
                <td>GH₵<span id="subtotal-${item.id}">${item.totalPrice.toFixed(2)}</span></td>
                <td><button class="remove-btn" data-id="${item.id}">Remove</button></td>
            `;

            // Append the row to the cart items container
            cartItemsContainer.appendChild(itemRow);

            // Add event listener for quantity input change
            itemRow.querySelector('.quantity-input').addEventListener('input', updateItemQuantity);

            // Add event listener for remove button
            itemRow.querySelector('.remove-btn').addEventListener('click', removeItemFromCart);
        });

        // Update the subtotal and total prices
        updateCartSummary(cart);
    }

    // Function to handle quantity update
    function updateItemQuantity(event) {
        const input = event.target;
        const itemID = input.getAttribute('data-id');
        const newQuantity = parseInt(input.value);
        const cart = JSON.parse(localStorage.getItem(`cart_${localStorage.getItem('userID')}`)) || {};

        if (cart[itemID] && newQuantity >= 1) {
            // Update the quantity
            cart[itemID].quantity = newQuantity;

            // Recalculate the total price for that item
            cart[itemID].totalPrice = cart[itemID].price * cart[itemID].quantity;

            // Update the cart in localStorage
            localStorage.setItem(`cart_${localStorage.getItem('userID')}`, JSON.stringify(cart));

            // Update the displayed quantity and total price
            input.value = newQuantity;
            document.getElementById(`subtotal-${itemID}`).textContent = cart[itemID].totalPrice.toFixed(2);

            // Recalculate and update the overall total price
            updateCartSummary(cart);
        }
    }

    // Function to remove an item from the cart
    function removeItemFromCart(event) {
        const button = event.target;
        const itemID = button.getAttribute('data-id');
        const cart = JSON.parse(localStorage.getItem(`cart_${localStorage.getItem('userID')}`)) || {};

        // Remove the item from the cart
        delete cart[itemID];

        // Update the cart in localStorage
        localStorage.setItem(`cart_${localStorage.getItem('userID')}`, JSON.stringify(cart));

        // Remove the item row from the DOM
        const itemRow = button.closest('tr');
        itemRow.remove();

        // Update the cart summary
        updateCartSummary(cart);
    }

    // Function to update the cart summary (Total and Subtotal)
    function updateCartSummary(cart) {
        let subtotalPrice = 0;
        Object.values(cart).forEach(item => {
            subtotalPrice += item.totalPrice;
        });

        // Update subtotal and total price
        document.getElementById('subtotalPrice').textContent = `GH₵${subtotalPrice.toFixed(2)}`;
        document.getElementById('totalPrice').textContent = `GH₵${subtotalPrice.toFixed(2)}`;
    }
</script>

<style>
    .cart-container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 0 20px;
    }

    .cart-main {
        background: white;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    .cart-items {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .cart-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .cart-item-details {
        display: flex;
        justify-content: space-between;
        width: 100%;
        align-items: center;
    }

    .cart-item-name {
        font-weight: 600;
        color: #333;
        flex: 1;
    }

    .cart-item-price,
    .cart-item-subtotal {
        font-weight: 600;
        color: #333;
        min-width: 100px;
        text-align: center;
    }

    .cart-item-quantity {
        display: flex;
        align-items: center;
    }

    .quantity-input {
        width: 60px;
        padding: 5px;
        text-align: center;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #e9ecef;
    }

    .remove-btn {
        background: #f8d7da;
        color: #721c24;
        border: none;
        padding: 8px 16px;
        font-size: 14px;
        border-radius: 5px;
        cursor: pointer;
    }

    .remove-btn:hover {
        background: #f5c6cb;
    }

    .cart-actions {
        display: flex;
        gap: 15px;
        margin-top: 30px;
        padding: 0 30px;
    }

    .coupon-input {
        flex: 1;
        padding: 12px 20px;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        font-size: 14px;
        background: #f8f9fa;
    }

    .apply-coupon-btn,
    .update-cart-btn {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 10px;
        font-weight: 600;
        cursor: pointer;
    }

    .cart-summary {
        background: white;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .summary-label {
        color: #666;
    }

    .summary-value {
        font-weight: 600;
        color: #333;
    }

    .discount-value {
        color: var(--primary-color);
    }

    .total-row {
        border-top: 2px solid #eee;
        padding-top: 20px;
        margin-top: 20px;
        font-size: 18px;
        font-weight: 700;
    }

    .checkout-btn {
        width: 100%;
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 15px;
        border-radius: 15px;
        font-size: 16px;
        font-weight: 600;
        margin-top: 25px;
        cursor: pointer;
    }

    @media (max-width: 992px) {
        .cart-container {
            margin: 20px auto;
        }

        .row {
            flex-direction: column;
        }

        .cart-summary {
            margin-top: 30px;
        }
    }

    @media (max-width: 768px) {
        .cart-item {
            flex-direction: column;
            align-items: flex-start;
        }

        .cart-item-details {
            flex-direction: column;
            align-items: flex-start;
        }

        .cart-actions {
            flex-direction: column;
            padding: 0 15px;
        }

        .cart-main {
            padding: 20px 15px;
        }
    }
</style>
